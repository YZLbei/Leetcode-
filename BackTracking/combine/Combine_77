package com.combine;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Combine_77 {
    public LinkedList<Integer> path =new LinkedList<>();;//一条路径
    public List<List<Integer>> result= new ArrayList<>();//最后的结果
    public List<List<Integer>> combine(int n, int k) {
        backtracking(n,k,1);
        return result;
    }

    //回溯问题
    public void backtracking(int n,int k,int startIndex){
        if (path.size()==k){
            //System.out.println("ddd");
            result.add(new LinkedList<>(path));
            System.out.println(path);
            return;
        }
        //单层逻辑
        for (int i = startIndex; i <=n-(k-path.size())+1 ; i++) {
            path.add(i);
            backtracking(n,k,i+1);
            path.remove(path.size()-1);
            //path.removeLast();//撤销处理的节点
        }
    }
}
