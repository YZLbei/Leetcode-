package com.combine;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class CombinationSum2_40 {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        backtracking(candidates,target,0);
        return result;
    }
    public List<List<Integer>> result = new LinkedList<>();
    public LinkedList<Integer> path = new LinkedList<>();
    public int pathSum;//路径目前的和
    public void backtracking(int[] candidates, int target,int startIndex){
        //终止条件为
        //1.pathSum等于target
        //2.pathSum大于target
        if (pathSum==target){
            result.add(new LinkedList<>(path));
            return;
        }
        for (int i = startIndex; i < candidates.length&&pathSum+candidates[i]<=target; i++) {
            path.add(candidates[i]);
            pathSum+=candidates[i];
            backtracking(candidates,target,i+1);
            path.removeLast();
            pathSum-=candidates[i];
            while (i<candidates.length-1&&candidates[i]==candidates[i+1]){
                i++;
                System.out.println("进入");
            }

        }
    }
}
