package BST;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class SearchBST_700 {
    public class TreeNode{
        int val;
        TreeNode left;
        TreeNode right;
        public TreeNode(){}
        public TreeNode(int x){this.val =x;}
        public TreeNode(TreeNode left, TreeNode right, int x){
            this.left=left;
            this.right = right;
            this.val = x;
        }
    }

    /**
     * 找到树中节点为val的节点，并返回以这个节点为根节点的树
     * 考虑用曾此遍历的模板
     * 自己的思路
     * @param root 树
     * @param val val
     * @return 子树
     */
    public TreeNode searchBST(TreeNode root, int val) {
        if(root==null) return null;
        else if(root.val==val)
            return root;
        Queue<TreeNode> queue =new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()){
            int size = queue.size();
            while (size-->0){
                TreeNode temp = queue.poll();
                if(temp.val==val)
                    return temp;
                else{
                    if(temp.left!=null)queue.offer(temp.left);
                    if (temp.right!=null)queue.offer(temp.right);
                }
            }
        }
        return null;
    }


    /**
     * 二叉搜索树与普通二叉树不同
     * @param root
     * @param val
     * @return
     */
    public TreeNode searchBST2(TreeNode root, int val) {
        if(root==null||root.val==val) return root;

        TreeNode rightResult = null;
        if(root.val<val)
             rightResult = searchBST2(root.right,val);
        TreeNode leftResult = null;
        if(root.val>val)
             leftResult = searchBST2(root.left,val);

        if(leftResult!=null)
            return leftResult;
        else if (rightResult!=null)
            return rightResult;
        else
            return null;

    }


    /**
     * 二叉搜索树迭代法
     * 二叉搜索树已经设置好了搜索方向，所以不需要栈或者队列
     */
    public TreeNode searchBST3(TreeNode root, int val) {
        if (root==null||root.val==val)return root;
        while (root!=null){
            if(root.val==val){
                return root;
            }
            else if(root.val<val)
                root =root.right;
            else
                root = root.left;

        }
        return null;
    }
}
